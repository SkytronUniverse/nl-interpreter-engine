// Code generated by counterfeiter. DO NOT EDIT.
package sentimentfakes

import (
	"sync"

	"github.com/nl-interpreter-engine/pkg/sentiment"
)

type FakeSentimenter struct {
	InterpretSentimentStub        func(string) ([]byte, error)
	interpretSentimentMutex       sync.RWMutex
	interpretSentimentArgsForCall []struct {
		arg1 string
	}
	interpretSentimentReturns struct {
		result1 []byte
		result2 error
	}
	interpretSentimentReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSentimenter) InterpretSentiment(arg1 string) ([]byte, error) {
	fake.interpretSentimentMutex.Lock()
	ret, specificReturn := fake.interpretSentimentReturnsOnCall[len(fake.interpretSentimentArgsForCall)]
	fake.interpretSentimentArgsForCall = append(fake.interpretSentimentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.InterpretSentimentStub
	fakeReturns := fake.interpretSentimentReturns
	fake.recordInvocation("InterpretSentiment", []interface{}{arg1})
	fake.interpretSentimentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSentimenter) InterpretSentimentCallCount() int {
	fake.interpretSentimentMutex.RLock()
	defer fake.interpretSentimentMutex.RUnlock()
	return len(fake.interpretSentimentArgsForCall)
}

func (fake *FakeSentimenter) InterpretSentimentCalls(stub func(string) ([]byte, error)) {
	fake.interpretSentimentMutex.Lock()
	defer fake.interpretSentimentMutex.Unlock()
	fake.InterpretSentimentStub = stub
}

func (fake *FakeSentimenter) InterpretSentimentArgsForCall(i int) string {
	fake.interpretSentimentMutex.RLock()
	defer fake.interpretSentimentMutex.RUnlock()
	argsForCall := fake.interpretSentimentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSentimenter) InterpretSentimentReturns(result1 []byte, result2 error) {
	fake.interpretSentimentMutex.Lock()
	defer fake.interpretSentimentMutex.Unlock()
	fake.InterpretSentimentStub = nil
	fake.interpretSentimentReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSentimenter) InterpretSentimentReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.interpretSentimentMutex.Lock()
	defer fake.interpretSentimentMutex.Unlock()
	fake.InterpretSentimentStub = nil
	if fake.interpretSentimentReturnsOnCall == nil {
		fake.interpretSentimentReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.interpretSentimentReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSentimenter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.interpretSentimentMutex.RLock()
	defer fake.interpretSentimentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSentimenter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sentiment.Sentimenter = new(FakeSentimenter)
